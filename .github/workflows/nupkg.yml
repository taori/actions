name: Create nuget package

on:
  workflow_call:
    inputs:  
        
      solutionPath:
        required: true
        type: string
        
      projectPath:
        required: true
        type: string
        
      versionSuffix:
        required: true
        type: string
        
      publish:
        required: true
        type: boolean
        
      publishSnupkg:
        required: true
        type: boolean
        
      packageId:
        required: true
        type: string
        
      removePrereleases:
        required: false
        type: boolean
        default: false
        
      configuration:
        required: false
        type: string
        default: "Release"
        
      verbosity:
        required: false
        type: string
        default: "minimal"    
        
      dotnetVersion:
        required: false
        type: string
        default: "5.0.x, 6.0.x"
        
    secrets:
      nuget:
        required: true
        
  workflow_dispatch:
  
jobs:
  # This workflow contains a single job called "build"

  environment : 
    runs-on: ubuntu-latest
    
    outputs:      
      versionSuffix : ${{ steps.defaults.outputs.versionSuffix }}
      verbosity : ${{ steps.defaults.outputs.verbosity }}

    steps:
              
      - name: declare default values 
        id: defaults
        shell: pwsh
        run: |    
          $versionSuffix = "";
          
          if([string]::IsNullOrEmpty("${{ inputs.versionSuffix }}") -eq $true){
            $versionSuffix = ""
          } else {
            $versionSuffix = "${{ inputs.versionSuffix }}${{github.run_number}}"
          }
          
          $values = @(
              @("versionSuffix", $true, "$versionSuffix", "$versionSuffix"),
              @("verbosity", $true, "${{ inputs.verbosity }}", "minimal")
            )
            
          foreach($pair in $values){
            $value = $pair[2]
            if($pair[1] -eq $true -And [string]::IsNullOrEmpty("$value") -eq $true){
                $value = $pair[3]
            }
            
            Write-Host "Assigning $($pair[0]) => $value"
            echo "::set-output name=$($pair[0])::$value"
          }
          
  
  build:
  
    runs-on: ubuntu-latest    
    needs: environment
    
    env:      
      versionSuffix : ${{ needs.environment.outputs.versionSuffix }}
      verbosity : ${{ needs.environment.outputs.verbosity }}
      
      DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION: true
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      DOTNET_NOLOGO: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true

    steps:
        
    - name: test variable publish
      if: ${{ inputs.publish }}
      shell: pwsh
      run: Write-Host "publishing"
      
    - name: test variable publish and false
      if: ${{ inputs.publish && false }}
      shell: pwsh
      run: Write-Host "publishing"
        
    - name: stop
      run: exit 1
      
    - uses: actions/checkout@v2
    
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v3.0.0
      with:
        dotnet-version: ${{ inputs.dotnetVersion }}

    - name: Restore dependencies
      run: dotnet restore ${{ inputs.solutionPath }}
    - name: Build
      run: dotnet build ${{ inputs.solutionPath }} --verbosity $verbosity -c $configuration --no-restore 
    - name: Test
      run: dotnet test ${{ inputs.solutionPath }} --verbosity $verbosity -c $configuration --no-build 
              
    - name: Pack
      if: ${{ needs.environment.outputs.publishRelease == 'True' }}
      run: dotnet pack ${{ inputs.projectPath }} --verbosity $verbosity -c $configuration -o artifacts/${{ inputs.packageId }} --no-build /p:VersionSuffix=$versionSuffix

    - name: Remove snupkg
      if: ${{ input.publishSnupkg == 'True' && false }}
      run: find artifacts/${{ inputs.packageId }}/ -name "*.snupkg" -type f -delete
      
    - name: Release
      if: ${{ inputs.publish == 'True' && false }}
      run: dotnet nuget push "artifacts/${{ inputs.packageId }}/*.nupkg" -k ${{ secrets.nuget }} -s https://api.nuget.org/v3/index.json
      
    - name: Remove old prereleases 
      if: ${{ inputs.removePrereleases }}
      id: defaults
      shell: pwsh
      run: |  
        & dotnet tool install --global NugetUnlister
        $packageVersion = Get-ChildItem -Recurse -Filter '*.nupkg' | select { $_.Name } -ExpandProperty Name -First 1 | Select-String -Pattern "\d[\d\w\.\+-]+(?=.nupkg)" | %{$_.Matches.Value}
        & nuget-unlist drop prereleasebefore ${{ inputs.packageId }} $packageVersion ${{ secrets.nuget }}
       
