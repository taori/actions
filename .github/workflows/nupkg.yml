name: Nuget

on:
  workflow_call:
    inputs:  
      
      packProjects:
        type: string
        required: true
        description: 'expects a syntax like: "Path1;Path2"'
      
      solutionPath:
        required: true
        type: string
        
      versionSuffix:
        required: false
        type: string
        default: ""
        
      versionPrefix:
        required: false
        type: string
        default: ""
        
      publish:
        required: true
        type: boolean
        
      package:
        required: true
        type: boolean
      
      publishSymbols:
        required: true
        type: boolean
      
      runCoverage:
        required: true
        type: boolean
        default: true
      
      removePrereleases:
        required: false
        type: boolean
        default: false
        
      skipTests:
        required: false
        type: boolean
        default: false
        
      configuration:
        required: false
        type: string
        default: "Release"
        
      verbosity:
        required: false
        type: string
        default: "minimal"    
        
      dotnetVersion:
        required: false
        type: string
        default: "5.0.x, 6.0.x"
        
      coverageThreshold:
        required: false
        type: string
        default: '60 80'
        
      concurrencyToken:
        required: false
        type: string
        default: ci-${{ github.ref }}
        
      concurrencyAbortable:
        required: true
        type: boolean
        default: true
        
      updateReadme:
        required: false
        type: boolean
        default: true
        
      updateReadmePath:
        required: false
        type: string
        default: "./README.md"
        
      debugWorkflow:
        required: false
        type: boolean
        default: false
        
      testArguments:
        required: false
        type: string
        default: ""
        
    secrets:
      nuget:
        required: true
        
permissions: 
  contents: 
    write
  pull-requests: 
    write
  pages: 
    write
  id-token: 
    write

jobs:
  
  build:
            
    concurrency:    
      group: ${{ inputs.concurrencyToken }}
      cancel-in-progress: ${{ inputs.concurrencyAbortable }}      

    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    
    env:            
      DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION: true
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      DOTNET_NOLOGO: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true

    steps:
    
    - name: environment
      id: environment
      shell: bash
      run: |
        REPOSITORY_NAME="${{ github.repository }}"
        OWNER=$(echo $REPOSITORY_NAME | cut -d'/' -f1)
        REPO=$(echo $REPOSITORY_NAME | cut -d'/' -f2)
        echo "updateRepo=${{ (github.ref_name == github.event.repository.default_branch && (github.event.pull_request.merged == true || github.event_name == 'push' )) }}" >> "$GITHUB_OUTPUT" 
        echo "refName=${{ github.ref_name }}" >> "$GITHUB_OUTPUT"
        echo "eventName=${{ github.event_name }}" >> "$GITHUB_OUTPUT"
        echo "merged=${{ github.event.pull_request.merged || false }}" >> "$GITHUB_OUTPUT"
        echo "defaultBranch=${{ github.event.repository.default_branch }}" >> "$GITHUB_OUTPUT"
          
        if [[ "$REPO" == "$OWNER.github.io" ]]; then        
          echo "pageURL=https://$OWNER.github.io" >> "$GITHUB_OUTPUT"
        else
          echo "pageURL=https://$OWNER.github.io/$REPO" >> "$GITHUB_OUTPUT"
        fi        

    - name: Dump environment outputs
      if: ${{ inputs.debugWorkflow }}
      run: echo "${{ toJson( steps.environment.outputs) }}" > env_outputs.json
      
    - name: Display environment outputs
      if: ${{ inputs.debugWorkflow }}
      run: cat env_outputs.json
            
    - name: nuget secret verification
      env:
        NUGET: ${{ secrets.nuget }}
      if: "${{ env.NUGET == '' }}"
      uses: actions/github-script@v3
      with:
        script: |
            core.setFailed('"nuget" secret is missing')
        
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4.0.1
      with:
        dotnet-version: ${{ inputs.dotnetVersion }}
        
   # - name: stop
   #   run: exit 1
      
    - uses: actions/checkout@v4.1.7
      with: 
        persist-credentials: true
        repository: ${{ github.event.pull_request.head.repo.full_name }} # required for commit
        ref: ${{ github.event.pull_request.head.ref }} # required for commit

    - name: Restore dependencies
      run: dotnet restore ${{ inputs.solutionPath }} --ignore-failed-sources
      
    - name: Build
      run: dotnet build ${{ inputs.solutionPath }} --verbosity ${{ inputs.verbosity }} -c ${{ inputs.configuration }} --no-restore 
      
    - name: Test
      run: dotnet test ${{ inputs.solutionPath }} --verbosity ${{ inputs.verbosity }} -c ${{ inputs.configuration }} --no-build --collect:"XPlat Code Coverage" /p:CoverletOutputFormat=cobertura --results-directory ./coverage ${{ inputs.testArguments }}

    - name: Upload TestResults
      if: always() && false
      uses: actions/upload-artifact@v4.3.6
      with:
        name: testresults
        path: ./coverage/**/*
        if-no-files-found: error
        retention-days: 1
        
    - name: ReportGenerator
      if: ${{ inputs.runCoverage }} 
      uses: danielpalme/ReportGenerator-GitHub-Action@5.3.8
      with:
        reports: ./coverage/**/coverage.cobertura.xml
        targetdir: ./coveragereport
        reporttypes: Html_Dark;Cobertura    

    - name: Upload a Build Artifact
      if: ${{ inputs.runCoverage && inputs.debugWorkflow }} 
      uses: actions/upload-artifact@v4.3.6
      with:
        name: reportgenerator
        path: ./coveragereport/*.*
        if-no-files-found: error
        retention-days: 7   
             
    - name: Code Coverage Report
      if: ${{ inputs.runCoverage }}
      uses: irongut/CodeCoverageSummary@51cc3a756ddcd398d447c044c02cb6aa83fdae95 #v1.3.0
      with:
       #filename: coverage/**/coverage.cobertura.xml
       filename: ./coveragereport/Cobertura.xml
       badge: true
       fail_below_min: true
       format: markdown
       hide_branch_rate: false
       hide_complexity: true       
       indicators: true
       output: both
       thresholds: ${{ inputs.coverageThreshold }} 

    - name: Upload a Build Artifact
      if: ${{ inputs.runCoverage && inputs.debugWorkflow }} 
      uses: actions/upload-artifact@v4.3.6
      with:
        name: irongut report
        path: code-coverage-results.md
        if-no-files-found: error
        retention-days: 7
       
    - name: Add Coverage PR Comment
      uses: marocchino/sticky-pull-request-comment@331f8f5b4215f0445d3c07b4967662a32a2d3e31 #v2
      if: ${{ inputs.runCoverage }} 
      with:
        recreate: true
        path: code-coverage-results.md

    - name: read coverage result
      if: ${{ inputs.runCoverage }}
      shell: pwsh
      id: codecoverageread
      run: |
        $content = Get-Content -Path 'code-coverage-results.md' -Raw  
        echo 'content<<EOF' >> $env:GITHUB_OUTPUT
        echo "$content" >> $env:GITHUB_OUTPUT
        echo "[Coverage details](${{ steps.environment.outputs.pageURL }})" >> $env:GITHUB_OUTPUT
        echo 'EOF' >> $env:GITHUB_OUTPUT
      
    - name: Write to Job Summary
      if: ${{ inputs.runCoverage }} 
      shell: pwsh
      run: |      
       # echo 'content<<EOF' >> $env:GITHUB_STEP_SUMMARY
        echo "${{ steps.codecoverageread.outputs.content }}" >> $env:GITHUB_STEP_SUMMARY
       # echo 'EOF' >> $env:GITHUB_STEP_SUMMARY
        
    - name: Update coverage report in Readme.MD
      if: ${{ inputs.runCoverage }}
      shell: pwsh
      run: |
        $insertion = "${{ steps.codecoverageread.outputs.content }}"        
        (Get-Content "${{ inputs.updateReadmePath }}" -Raw) -replace '<!--CoverageStart-->(?:[\s]|.)+<!--CoverageEnd-->',"<!--CoverageStart-->`n$insertion`n<!--CoverageEnd-->" | Out-File "${{ inputs.updateReadmePath }}" -NoNewLine
        #(Get-Content "${{ inputs.updateReadmePath }}" -Raw)
        
    - name: Push changes
      uses: EndBug/add-and-commit@a94899bca583c204427a224a7af87c02f9b325d5 #v9.1.4
      if: ${{ inputs.runCoverage && steps.environment.outputs.updateRepo=='true' }}
      with:        
        default_author: github_actions
        add: ./README.md
        message: 'Coverage report in Readme.MD updated'
        
    - name: Upload GitHub Pages artifact
      if: ${{ inputs.runCoverage && steps.environment.outputs.updateRepo=='true' }}
      uses: actions/upload-pages-artifact@v3.0.1
      with:
        path: ./coveragereport

    - name: Deploy GitHub Pages site
      if: ${{ inputs.runCoverage && steps.environment.outputs.updateRepo=='true' }}
      uses: actions/deploy-pages@v4.0.5
      
    - name: Pack with csproj version
      shell: pwsh
      if: ${{ inputs.package && inputs.versionPrefix == '' }}
      run: |
        $projects = "${{ inputs.packProjects }}".Split(";")
        foreach($project in $projects){
          dotnet pack $project --verbosity ${{ inputs.verbosity }} -c ${{ inputs.configuration }} -o artifacts/nupkg --no-build /p:VersionSuffix=${{ inputs.versionSuffix }}
        }        
         
    - name: Pack manual version
      shell: pwsh
      if: ${{ inputs.package && inputs.versionPrefix != '' }}
      run: |
        $projects = "${{ inputs.packProjects }}".Split(";")
        foreach($project in $projects){
          dotnet pack $project --verbosity ${{ inputs.verbosity }} -c ${{ inputs.configuration }} -o artifacts/nupkg --no-build /p:VersionSuffix=${{ inputs.versionSuffix }} /p:VersionPrefix=${{ inputs.versionPrefix }}
        }   

    - name: Remove snupkg
      if: ${{ !inputs.publishSymbols && inputs.publish }}
      run: find artifacts/nupkg/ -name "*.snupkg" -type f -delete
      
    - name: Release
      if: ${{ inputs.publish }}
      run: dotnet nuget push "artifacts/nupkg/*.nupkg" -k ${{ secrets.nuget }} -s https://api.nuget.org/v3/index.json
      
    - name: Remove old prereleases 
      if: ${{ inputs.removePrereleases }}
      shell: pwsh
      run: |  
        & dotnet tool install --global NugetUnlister
         $packages = Get-ChildItem "artifacts/nupkg/" -Filter "*.nupkg" | `
         %{ $_.Name } | `
         Select-String -Pattern "(?<packageId>.+)\.(?<version>\d{1,2}\.\d{1,2}\.\d{1,2}(?:[-\w\d.]+)?)(?=.nupkg)" | `
         %{ , @( $_.Matches[0].Groups["packageId"].Value, $_.Matches[0].Groups["version"].Value ) } | `
         % { Write-Output "nuget-unlist drop prereleasebefore $package[0] $package[1] ${{ secrets.nuget }}" && nuget-unlist drop prereleasebefore $package[0] $package[1] ${{ secrets.nuget }} }
