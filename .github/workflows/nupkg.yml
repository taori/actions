name: Nuget

on:
  workflow_call:
    inputs:  
        
      solutionPath:
        required: true
        type: string
        
      projectPaths:
        required: true
        type: string
        
      versionSuffix:
        required: false
        type: string
        default: ""
        
      versionPrefix:
        required: false
        type: string
        default: ""
        
      publish:
        required: true
        type: boolean
        
      package:
        required: true
        type: boolean
      
      publishSymbols:
        required: true
        type: boolean
      
      runCoverage:
        required: true
        type: boolean
        default: true
      
      skipSolutionBuild:
        required: false
        type: boolean
        default: false
      
      removePrereleases:
        required: false
        type: boolean
        default: false
        
      skipTests:
        required: false
        type: boolean
        default: false
        
      configuration:
        required: false
        type: string
        default: "Release"
        
      verbosity:
        required: false
        type: string
        default: "minimal"    
        
      dotnetVersion:
        required: false
        type: string
        default: "5.0.x, 6.0.x"
        
      coverageThreshold:
        required: false
        type: string
        default: '60 80'
        
    secrets:
      nuget:
        required: true
  
jobs:
  
  build:
      
    concurrency:    
      group: ci-${{ github.ref }}
      cancel-in-progress: true

    runs-on: ubuntu-latest
    
    env:            
      DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION: true
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      DOTNET_NOLOGO: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true

    steps:
            
    - name: nuget secret verification
      env:
        NUGET: ${{ secrets.nuget }}
      if: "${{ env.NUGET == '' }}"
      uses: actions/github-script@v3
      with:
        script: |
            core.setFailed('"nuget" secret is missing')
        
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v3.0.0
      with:
        dotnet-version: ${{ inputs.dotnetVersion }}
             
    #- name: stop
    #  run: exit 1
      
    - uses: actions/checkout@v3.1.0
      if: ${{ !inputs.skipSolutionBuild }}

    - name: Restore dependencies
      if: ${{ !inputs.skipSolutionBuild }}
      run: dotnet restore ${{ inputs.solutionPath }} --ignore-failed-sources
      
    - name: Build
      if: ${{ !inputs.skipSolutionBuild }}
      run: dotnet build ${{ inputs.solutionPath }} --verbosity ${{ inputs.verbosity }} -c ${{ inputs.configuration }} --no-restore 
      
    - name: Test
      if: ${{ !inputs.skipSolutionBuild }}
      run: dotnet test ${{ inputs.solutionPath }} --verbosity ${{ inputs.verbosity }} -c ${{ inputs.configuration }} --no-build --collect:"XPlat Code Coverage" --results-directory ./coverage
             
    - name: Code Coverage Report
      if: ${{ inputs.runCoverage }}
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
       filename: coverage/**/coverage.cobertura.xml
       badge: true
       fail_below_min: true
       format: markdown
       hide_branch_rate: false
       hide_complexity: true
       indicators: true
       output: both
       thresholds: ${{ inputs.coverageThreshold }}
    - name: Pack with csproj version
      shell: pwsh
      if: ${{ inputs.package && inputs.versionPrefix == '' }}
      run: |
        $projects = "${{ inputs.projectPaths }}".Split(";")
        foreach($project in $projects){
          dotnet pack $project --verbosity ${{ inputs.verbosity }} -c ${{ inputs.configuration }} -o artifacts/nupkg --no-build /p:VersionSuffix=${{ inputs.versionSuffix }}
        }        
         
    - name: Pack manual version
      shell: pwsh
      if: ${{ inputs.package && inputs.versionPrefix != '' }}
      run: |
        $projects = "${{ inputs.projectPaths }}".Split(";")
        foreach($project in $projects){
          dotnet pack $project --verbosity ${{ inputs.verbosity }} -c ${{ inputs.configuration }} -o artifacts/nupkg --no-build /p:VersionSuffix=${{ inputs.versionSuffix }} /p:VersionPrefix=${{ inputs.versionPrefix }}
        }   

    - name: Remove snupkg
      if: ${{ !inputs.publishSymbols && inputs.publish }}
      run: find artifacts/nupkg/ -name "*.snupkg" -type f -delete
      
    - name: Release
      if: ${{ inputs.publish }}
      run: dotnet nuget push "artifacts/nupkg/*.nupkg" -k ${{ secrets.nuget }} -s https://api.nuget.org/v3/index.json
      
    - name: Remove old prereleases 
      if: ${{ inputs.removePrereleases }}
      shell: pwsh
      run: |  
        & dotnet tool install --global NugetUnlister
        $packages = Get-ChildItem "artifacts/nupkg/" -Filter "*.nupkg" |
         %{ $_.Name } |
         Select-String -Pattern "(?<packageId>.+)\.(?<version>\d{1,2}\.\d{1,2}\.\d{1,2}(?:[-\w\d.]+)?)(?=.nupkg)" |         
         %{ , @( $_.Matches[0].Groups["packageId"].Value, $_.Matches[0].Groups["version"].Value ) } 
            
        foreach ($package in $packages){
            Write-Output "nuget-unlist drop prereleasebefore $package[0] $package[1] ${{ secrets.nuget }}"
            nuget-unlist drop prereleasebefore $package[0] $package[1] ${{ secrets.nuget }}
        }
       
